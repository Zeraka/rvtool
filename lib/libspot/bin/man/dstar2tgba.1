.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH DSTAR2TGBA "1" "September 2019" "dstar2tgba (spot) 2.8.2" "User Commands"
.SH NAME
dstar2tgba \- convert automata into Büchi automata
.SH SYNOPSIS
.B dstar2tgba
[\fI\,OPTION\/\fR...] [\fI\,FILENAME\/\fR[\fI\,/COL\/\fR]...]
.SH DESCRIPTION
Convert automata with any acceptance condition into variants of Büchi
automata.
.PP
This reads automata into any supported format (HOA, LBTT, ltl2dstar, never
claim) and outputs a Transition\-based Generalized Büchi Automata in GraphViz's
format by default.  Each supplied file may contain multiple automata.
.SS "Input:"
.TP
\fB\-F\fR, \fB\-\-file\fR=\fI\,FILENAME\/\fR
process the automaton in FILENAME
.TP
\fB\-\-trust\-hoa\fR=\fI\,BOOL\/\fR
If False, properties listed in HOA files are
ignored, unless they can be easily verified.  If
True (the default) any supported property is
trusted.
.SS "Output automaton type:"
.TP
\fB\-B\fR, \fB\-\-ba\fR
Büchi Automaton (implies \fB\-S\fR)
.TP
\fB\-\-cobuchi\fR, \fB\-\-coBuchi\fR
automaton with co\-Büchi acceptance (will
recognize a superset of the input language if not
co\-Büchi realizable)
.TP
\fB\-C\fR, \fB\-\-complete\fR
output a complete automaton
.TP
\fB\-G\fR, \fB\-\-generic\fR
any acceptance condition is allowed
.TP
\fB\-M\fR, \fB\-\-monitor\fR
Monitor (accepts all finite prefixes of the given
property)
.HP
\fB\-p\fR, \fB\-\-colored\-parity\fR[\fI\,\/\fR=\fI\,any\/\fR|\fI\,min\/\fR|\fI\,max\/\fR|\fI\,odd\/\fR|\fI\,even\/\fR|\fI\,min\/\fR odd|min even|max odd|max
.TP
even]
colored automaton with parity acceptance
.TP
\fB\-P\fR, \fB\-\-parity\fR[\fI\,\/\fR=\fI\,any\/\fR|\fI\,min\/\fR|\fI\,max\/\fR|\fI\,odd\/\fR|\fI\,even\/\fR|\fI\,min\/\fR odd|min even|max odd|max even]
automaton with parity acceptance
.TP
\fB\-S\fR, \fB\-\-state\-based\-acceptance\fR, \fB\-\-sbacc\fR
define the acceptance using states
.TP
\fB\-\-tgba\fR
Transition\-based Generalized Büchi Automaton
(default)
.SS "Output format:"
.TP
\fB\-8\fR, \fB\-\-utf8\fR
enable UTF\-8 characters in output (ignored with
\fB\-\-lbtt\fR or \fB\-\-spin\fR)
.TP
\fB\-\-check\fR[=\fI\,PROP\/\fR]
test for the additional property PROP and output
the result in the HOA format (implies \fB\-H\fR).  PROP
may be any prefix of 'all' (default),
\&'unambiguous', 'stutter\-invariant', or 'strength'.
.TP
\fB\-d\fR, \fB\-\-dot\fR[=\fI\,1\/\fR|\fI\,a\/\fR|\fI\,A\/\fR|\fI\,b\/\fR|\fI\,B\/\fR|\fI\,c\/\fR|\fI\,C(COLOR)\/\fR|\fI\,e\/\fR|\fI\,f(FONT)\/\fR|\fI\,h\/\fR|\fI\,k\/\fR|\fI\,K\/\fR|\fI\,n\/\fR|\fI\,N\/\fR|\fI\,o\/\fR|\fI\,r\/\fR|\fI\,R\/\fR|\fI\,s\/\fR|\fI\,t\/\fR|\fI\,u\/\fR|\fI\,v\/\fR|\fI\,y\/\fR|\fI\,+INT\/\fR|\fI\,<INT\/\fR|\fI\,#\/\fR]
GraphViz's format.
Add letters for (1) force numbered states, (a)
show acceptance condition (default), (A) hide
acceptance condition, (b) acceptance sets as
bullets, (B) bullets except for Büchi/co\-Büchi
automata, (c) force circular nodes, (C) color
nodes with COLOR, (d) show origins when known, (e)
force elliptic nodes, (f(FONT)) use FONT, (g) hide
edge labels, (h) horizontal layout, (k) use state
labels when possible, (K) use transition labels
(default), (n) show name, (N) hide name, (o)
ordered transitions, (r) rainbow colors for
acceptance sets, (R) color acceptance sets by
Inf/Fin, (s) with SCCs, (t) force transition\-based
acceptance, (u) hide true states, (v) vertical
layout, (y) split universal edges by color, (+INT)
add INT to all set numbers, (<INT) display at most
INT states, (#) show internal edge numbers
.TP
\fB\-H\fR, \fB\-\-hoaf\fR[=\fI\,1.1\/\fR|\fI\,i\/\fR|\fI\,k\/\fR|\fI\,l\/\fR|\fI\,m\/\fR|\fI\,s\/\fR|\fI\,t\/\fR|\fI\,v\/\fR]
Output the automaton in HOA format
(default).  Add letters to select (1.1) version
1.1 of the format, (i) use implicit labels for
complete deterministic automata, (s) prefer
state\-based acceptance when possible [default],
(t) force transition\-based acceptance, (m) mix
state and transition\-based acceptance, (k) use
state labels when possible, (l) single\-line
output, (v) verbose properties
.TP
\fB\-\-lbtt\fR[=\fI\,t\/\fR]
LBTT's format (add =t to force transition\-based
acceptance even on Büchi automata)
.TP
\fB\-\-name\fR=\fI\,FORMAT\/\fR
set the name of the output automaton
.TP
\fB\-o\fR, \fB\-\-output\fR=\fI\,FORMAT\/\fR
send output to a file named FORMAT instead of
standard output.  The first automaton sent to a
file truncates it unless FORMAT starts with '>>'.
.TP
\fB\-q\fR, \fB\-\-quiet\fR
suppress all normal output
.TP
\fB\-s\fR, \fB\-\-spin\fR[=\fI\,6\/\fR|\fI\,c\/\fR]
Spin neverclaim (implies \fB\-\-ba\fR).  Add letters to
select (6) Spin's 6.2.4 style, (c) comments on
states
.TP
\fB\-\-stats\fR=\fI\,FORMAT\/\fR, \fB\-\-format\fR=\fI\,FORMAT\/\fR
output statistics about the automaton
.PP
Any FORMAT string may use the following interpreted sequences (capitals for
input, minuscules for output):
.TP
%%
a single %
.TP
%<
the part of the line before the automaton if it
comes from a column extracted from a CSV file
.TP
%>
the part of the line after the automaton if it
comes from a column extracted from a CSV file
.TP
%A, %a
number of acceptance sets
.TP
%C, %c, %[LETTERS]C, %[LETTERS]c
number of SCCs; you may filter the SCCs to count
using the following LETTERS, possibly
concatenated: (a) accepting, (r) rejecting, (c)
complete, (v) trivial, (t) terminal, (w) weak,
(iw) inherently weak. Use uppercase letters to
negate them.
.TP
%D, %d
1 if the automaton is deterministic, 0 otherwise
.TP
%E, %e
number of reachable edges
.TP
%F
name of the input file
.TP
%G, %g, %[LETTERS]G, %[LETTERS]g
acceptance condition (in HOA syntax); add brackets
to print an acceptance name instead and LETTERS to
tweak the format: (0) no parameters, (a)
accentuated, (b) abbreviated, (d) style used in
dot output, (g) no generalized parameter, (l)
recognize Street\-like and Rabin\-like, (m) no main
parameter, (p) no parity parameter, (o) name
unknown acceptance as 'other', (s) shorthand for
\&'lo0'.
.TP
%H, %h
the automaton in HOA format on a single line (use
%[opt]H or %[opt]h to specify additional options
as in \fB\-\-hoa\fR=\fI\,opt)\/\fR
.TP
%L
location in the input file
.TP
%M, %m
name of the automaton
.TP
%N, %n
number of nondeterministic states
.TP
%P, %p
1 if the automaton is complete, 0 otherwise
.TP
%r
wall\-clock time elapsed in seconds (excluding
parsing)
.TP
%R, %[LETTERS]R
CPU time (excluding parsing), in seconds; Add
LETTERS to restrict to(u) user time, (s) system
time, (p) parent process, or (c) children
processes.
.TP
%S, %s
number of reachable states
.TP
%T, %t
number of reachable transitions
.TP
%U, %u, %[LETTER]U, %[LETTER]u
1 if the automaton contains some universal
.TP
branching (or a number of [s]tates or [e]dges with
universal branching)
.TP
%W, %w
one word accepted by the automaton
.TP
%X, %x, %[LETTERS]X, %[LETTERS]x
number of atomic propositions declared in the
automaton;  add LETTERS to list atomic
propositions with (n) no quoting, (s) occasional
double\-quotes with C\-style escape, (d)
double\-quotes with C\-style escape, (c)
double\-quotes with CSV\-style escape, (p) between
parentheses, any extra non\-alphanumeric character
will be used to separate propositions
.SS "Simplification goal:"
.TP
\fB\-a\fR, \fB\-\-any\fR
no preference, do not bother making it small or
deterministic
.TP
\fB\-D\fR, \fB\-\-deterministic\fR
prefer deterministic automata (combine with
\fB\-\-generic\fR to be sure to obtain a deterministic
automaton)
.TP
\fB\-\-small\fR
prefer small automata (default)
.SS "Simplification level:"
.TP
\fB\-\-high\fR
all available optimizations (slow, default)
.TP
\fB\-\-low\fR
minimal optimizations (fast)
.TP
\fB\-\-medium\fR
moderate optimizations
.SS "Miscellaneous options:"
.TP
\fB\-x\fR, \fB\-\-extra\-options\fR=\fI\,OPTS\/\fR
fine\-tuning options (see spot\-x (7))
.TP
\fB\-\-help\fR
print this help
.TP
\fB\-\-version\fR
print program version
.PP
Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.
.SH HISTORY
.B dstar2tgba
was introduced in Spot 1.2 as a command that reads automata
in
.BR ltl2dstar 's
format, and converts them into TGBA.  At this time it was
the only command-line tool being able to read automata.
.PP
In Spot 1.99.1 the
.B autfilt
command was introduced, but could only read automata
in the HOA format, or in
.BR lbtt 's
format, or as never claims.  So
.B dstar2tgba
was still the only way to process automata
in
.BR ltl2dstar 's
format.
.PP
In Spot 1.99.4 the parser for
.BR ltl2dstar 's
format was finally merged with the parser
used by
.B autfilt
for reading the other format.  This implies not only
that
.B autfilt
can now read
.BR ltl2dstar's
format, but also that
.B dstar2tgba
can read the other formats as well.

Nowadays, the command
.PP
.in +4n
.nf
.ft C
% dstar2tgba some files
.fi
.PP
can be used as a shorthand for
.PP
.in +4n
.nf
.ft C
% autfilt \-\-tgba \-\-high \-\-small some files
.fi
.PP
The name
.B dstar2tgba
is kept for backward compatibility and because it is used
in at least one published paper, but naming this tool
.B aut2tgba
would make more sense.
.SH BIBLIOGRAPHY
.TP
1.
.UR http://www.ltl2dstar.de/docs/ltl2dstar.html
The
.BR ltl2dstar manual
.UE .

Documents the output format of
.BR ltl2dstar .

.TP
2.
Chistof Löding: Mehods for the Transformation of ω-Automata:
Complexity and Connection to Second Order Logic.  Diploma Thesis.
University of Kiel. 1998.

Describes various tranformations from non-deterministic Rabin and
Streett automata to Büchi automata.  Slightly optimized variants of
these transformations are used by dstar2tgba for the general cases.

.TP
3.
Sriram C. Krishnan, Anuj Puri, and Robert K. Brayton: Deterministic
ω-automata vis-a-vis Deterministic Büchi Automata.  ISAAC'94.

Explains how to preserve the determinism of Rabin and Streett automata
when the property can be repreted by a Deterministic automaton.
dstar2tgba implements this for the Rabin case only.  In other words,
translating a deterministic Rabin automaton with dstar2tgba will
produce a deterministic TGBA or BA if such a automaton exists.

.TP
4.
Souheib Baarir and Alexandre Duret-Lutz: Mechanizing the minimization
of deterministic generalized Büchi automata.  Proceedings of FORTE'14.
LNCS 8461.

Explains the SAT-based minimization techniques that can be used (on
request only) by dstar2tgba to minimize deterministic Büchi automata.

.TP
5.
Souheib Baarir and Alexandre Duret-Lutz: SAT-based minimization of
deterministic ω-automata.  Proceedings of LPAR'15 (a.k.a LPAR-20).
LNCS 9450.

Extends the previous paper by allowing arbitrary acceptance
conditions.
.SH "REPORTING BUGS"
Report bugs to <spot@lrde.epita.fr>.
.SH COPYRIGHT
Copyright \(co 2019  Laboratoire de Recherche et Développement de l'Epita.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
.BR spot-x (7),
.BR autfilt (1)
