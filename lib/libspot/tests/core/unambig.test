#!/bin/sh
# -*- coding: utf-8 -*-
# Copyright (C) 2013, 2015-2019 Laboratoire de Recherche et
# Developpement de l'Epita
#
# This file is part of Spot, a model checking library.
#
# Spot is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Spot is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. ./defs

set -e

for f in 'Ga' \
         'Ga | Gb' \
         'Ga | GFb' \
         'Ga | FGb' \
         'F(Ga | Gb)' \
         'XFGa | GFb | Gc' \
         '(Ga -> Gb) W c' \
	 'F(a & !b & (!c W b))' \
         'G({{1;1}*}<>->a)'
do
  ltl2tgba -UH "$f" | autfilt -q --is-unambiguous
  ltl2tgba -UH "!($f)" | autfilt -q --is-unambiguous
  ltl2tgba -BUH "$f" | autfilt -q --is-unambiguous
  ltl2tgba -BUH "!($f)" | autfilt -q --is-unambiguous
  ltl2tgba -UH "$f" | autfilt --check |
      grep -E 'properties:.* (unambiguous|deterministic)'
  ltl2tgba -UH "!($f)" | autfilt --check |
      grep -E 'properties:.* (unambiguous|deterministic)'
done

for f in FGa '{[*1..4]}<>-> (p1 & (p1 U p0))'
do
  ltl2tgba -H "$f" | autfilt -qv --is-unambiguous
  ltl2tgba -UH "$f" | autfilt -q --is-unambiguous
done

# All these should be detected as ambiguous automata
cat >input<<EOF
HOA: v1
States: 1
Start: 0
AP: 2 "a" "b"
Acceptance: 1 Inf(0)
--BODY--
State: 0
[0] 0
[1] 0
[0&1] 0 {0}
--END--
HOA: v1
States: 1
Start: 0
AP: 2 "a" "b"
Acceptance: 2 Inf(0) & Inf(1)
--BODY--
State: 0
[0] 0
[1] 0 {0}
[0&1] 0 {0 1}
--END--
HOA: v1
States: 2
Start: 0
AP: 2 "a" "b"
Acceptance: 1 Inf(0)
--BODY--
State: 0
[0] 1 {0}
[1] 1
State: 1
[0] 1 {0}
--END--
HOA: v1
States: 2
Start: 0
AP: 2 "a" "b"
Acceptance: 1 Fin(0)
--BODY--
State: 0
[0] 1 {0}
[1] 1
State: 1
[0] 1 {0}
[!0] 1
--END--
HOA: v1
States: 3
Start: 0
AP: 2 "b" "a"
Acceptance: 4 (Fin(1) & Inf(2)) | (Fin(0) & Inf(3))
properties: trans-labels explicit-labels trans-acc complete
--BODY--
State: 0
[!0&!1] 1 {1}
[0&!1] 0 {1 3}
[!0&1] 1 {2}
[0&1] 0 {2 3}
State: 1
[!0&!1] 2 {1}
[0&!1] 2 {1 3}
[!0&1] 1 {2}
[0&1] 1 {2 3}
State: 2
[!0&!1] 2 {1}
[0&!1] 2 {1 3}
[!0&1] 2 {1}
[0&1] 2 {1 3}
[!0] 0  /* extra transition */
--END--
HOA: v1
States: 3
Start: 0
Start: 2 /* extra initial state */
AP: 2 "b" "a"
Acceptance: 4 (Fin(1) & Inf(2)) | (Fin(0) & Inf(3))
properties: trans-labels explicit-labels trans-acc complete
--BODY--
State: 0
[!0&!1] 1 {1}
[0&!1] 0 {1 3}
[!0&1] 1 {2}
[0&1] 0 {2 3}
State: 1
[!0&!1] 2 {1}
[0&!1] 2 {1 3}
[!0&1] 1 {2}
[0&1] 1 {2 3}
State: 2
[!0&!1] 2 {1}
[0&!1] 2 {1 3}
[!0&1] 2 {1}
[0&1] 2 {1 3}
--END--
EOF

run 1 autfilt -q --is-unambiguous input
run 0 autfilt --check input > output
test `grep -c unambiguous output` = 0

# Check 1000 random PSL formulas
randltl --seed=12 --psl -n 1000 3 | ltl2tgba -U -H |
  autfilt -v --is-unamb --stats=%M && exit 1

cat >input <<EOF
HOA: v1
properties: explicit-labels state-acc trans-labels
States: 3
Start: 0
AP: 0
Acceptance: 1 Inf(0)
acc-name: Buchi
name: ""
tool: "GOAL" ""
--BODY--
State: 0
[t] 2
[t] 1
State: 1
State: 2
--END--
HOA: v1
AP: 0
States: 3
Start: 0
Acceptance: 1 Inf(0)
properties: explicit-labels state-acc trans-labels unambiguous
--BODY--
State: 0
[t] 2
[t] 1
State: 1
State: 2
--END--
EOF


# Thus should be marked as unambiguous.  Report from Joachim Klein.
ltl2tgba --lbt-input -B -U -x wdba-minimize=0 "U p0 & p1 X ! p0" |
    grep 'properties:.*unambiguous'


# Make sure we preserve the "unambiguous" property if it is given.
run 0 autfilt -H --is-unambiguous input >output

cat >expected <<EOF
HOA: v1
name: ""
States: 3
Start: 0
AP: 0
acc-name: Buchi
Acceptance: 1 Inf(0)
properties: trans-labels explicit-labels state-acc
--BODY--
State: 0
[t] 2
[t] 1
State: 1
State: 2
--END--
HOA: v1
States: 3
Start: 0
AP: 0
acc-name: Buchi
Acceptance: 1 Inf(0)
properties: trans-labels explicit-labels state-acc unambiguous
--BODY--
State: 0
[t] 2
[t] 1
State: 1
State: 2
--END--
EOF
diff output expected


ltlcross --ambiguous --automata 'ltl2tgba -U' ltl2tgba -fFGa -fGFa --csv=out
cut -d, -f13 out >ltlcross.res
cat >expected <<EOF
"ambiguous_aut"
0
1
0
0
0
0
0
1
EOF
diff expected ltlcross.res


# This automaton was supplied by František Blahoudek, and is discussed
# in issue #188.  Our initial implementation of is_unambiguous() on
# this automaton used to take 38s, while the new version takes 0.2s.
# Using valgrind on this is a way to ensure that the test is procedure
# enough: it would have been too long on the previous version.

cat >smaller.hoa<<EOF
HOA: v1
States: 7
Start: 1
AP: 2 "a" "b"
Acceptance: 12 (Inf(11) | Fin(5)) & (Inf(10) | Fin(4)) & (Inf(9) |
  Fin(3)) & (Inf(8) | Fin(2)) & (Inf(7) | Fin(1)) & (Inf(6) | Fin(0))
properties: trans-labels explicit-labels trans-acc complete
--BODY--
State: 0
[t] 0
State: 1
[!0] 1 {0}
[0] 2
[0&1] 3
State: 2
[t] 2 {1}
[1] 3
State: 3
[t] 3 {2}
[!1] 4
State: 4
[t] 4 {3}
[1] 5
State: 5
[t] 5 {4}
[!1] 6
State: 6
[1] 0 {11}
[!1] 6 {5}
--END--
EOF

run 1 autfilt -q --is-unambiguous smaller.hoa

# These automata come from Simon Jantsch and David Müller.
# They exposed bugs in the optimized version of our unambiguous check.
cat >sjdb.hoa <<EOF
HOA: v1
name: "G(!a | !b) & (Ga | G(b | XGb))"
States: 4
Start: 0
AP: 2 "a" "b"
acc-name: all
Acceptance: 0 t
properties: trans-labels explicit-labels state-acc inherently-weak
--BODY--
State: 0
[!0&1] 1
[0&!1] 2
[!1] 3
State: 1
[!0&1] 1
[!1] 3
State: 2
[0&!1] 2
State: 3
[!0&1] 3
--END--
HOA: v1
name: "F(!a & XGa) | (F(!b & XGb) & G(!a | !b))"
States: 5
Start: 0
AP: 2 "a" "b"
acc-name: Buchi
Acceptance: 1 Inf(0)
properties: trans-labels explicit-labels state-acc inherently-weak
--BODY--
State: 0
[!0] 1
[t] 2
[!0 | !1] 3
[!1] 4
State: 1 {0}
[0] 1
State: 2
[!0] 1
[t] 2
State: 3
[!0 | !1] 3
[!1] 4
State: 4 {0}
[!0&1] 4
--END--
HOA: v1
States: 3
Start: 0
AP: 2 "p0" "p1"
acc-name: Buchi
Acceptance: 1 Inf(0)
properties: trans-labels explicit-labels trans-acc
--BODY--
State: 0 "((G (! (p0))) R ((! (p1)) | (G (! (p0)))))"
[!0] 1 {0}
[0&!1] 0 {0}
[!0&!1] 2
State: 1 "(G (! (p0)))"
[!0] 1 {0}
State: 2 "((G (! (p0))) R ((! (p1)) | (G (! (p0))))) & (F (p0))"
[0&!1] 0 {0}
[!0&!1] 2
--END--
EOF

test 3 = `autfilt -c --is-unambiguous sjdb.hoa`

# This automaton requires emptiness of SCC with Fin-acceptance.
cat >ambig.hoa<<EOF
HOA: v1
States: 5
Start: 4
AP: 2 "p0" "p1"
Acceptance: 4 Fin(0) & Fin(1)
--BODY--
State: 0
[0] 0 {0}
[!0] 1
State: 1
[1] 1 {1}
[!1] 0
State: 2
[0] 2 {0}
[!0] 3
State: 3
[1] 3 {1}
[!1] 2
State: 4
[0] 0
[0] 2
--END--
EOF
test 0 = `autfilt -c --is-unambiguous ambig.hoa`
