#ifndef __ASPECTDEMO_H
#define __ASPECTDEMO_H

#include <iostream>
#include <fstream>
#include <string>
#include "EventLoop.hpp"
#include "aspect.hh"
#include "automonitor-client.hpp"

#include <zmq.hpp>
#include <queue>

#include <thread>
#include <mutex>

using namespace std;

int eventid = 0;
int socket_connect_state = -1;

string addr = "tcp://localhost:25555";
/*
std::ofstream mycout(filename);
zmqMessageClient client(addr);
*/
const char *filename = "event.log";

EVENTLOG(mycout);
CREATSOCKET();

//std::ofstream mycout(filename);

aspect AspectDemo
{
        pointcut logger1() = execution("void Event1Func(...)"); //对该函数进行切入。
        pointcut logger2() = execution("void Event2Func(...)");
        pointcut logger3() = execution("void Event3Func(...)"); //对该函数进行切入。
        pointcut logger4() = execution("void Event4Func(...)");
        advice logger1() : after()
        {
                //AOPLogger_mutex(eventid, "event1", mycout); //
                AOPLoggerToBufferNewFile(eventid, "event1", addr,mycout);
        }

        advice logger2() : after()
        {
                // AOPLogger_mutex(eventid, "event2", mycout);
                AOPLoggerToBufferNewFile(eventid, "event2", addr,mycout);
        }
        advice logger3() : after()
        {
                // AOPLogger_mutex(eventid, "event3", mycout);
                AOPLoggerToBufferNewFile(eventid, "event3", addr,mycout);
        }

        advice logger4() : after()
        {
                // AOPLogger_mutex(eventid, "event3", mycout);
                //mtx.lock();
                AOPLoggerToBufferNewFile(eventid, "event4", addr,mycout);
                //mtx.unlock();
                //AOPLoggerBufferToZmq(eventid, "event4", mycout);
        }
        /*
    pointcut logger() = execution("void Event%(...)");

    advice logger() : after(){
        mycout << __LINE__ <<" :: "<< __FUNCTION__<< std::endl; //如何把函数名给
    }
    */
};

#endif