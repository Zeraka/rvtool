#line 2 "scanaut.cc"
#include "config.h"

#line 5 "scanaut.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hoayy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hoayy_create_buffer
#endif

#ifdef yy_delete_buffer
#define hoayy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hoayy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define hoayy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hoayy_scan_buffer
#endif

#ifdef yy_scan_string
#define hoayy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hoayy_scan_string
#endif

#ifdef yy_scan_bytes
#define hoayy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hoayy_scan_bytes
#endif

#ifdef yy_init_buffer
#define hoayy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hoayy_init_buffer
#endif

#ifdef yy_flush_buffer
#define hoayy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hoayy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hoayy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hoayy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hoayy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hoayy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hoayypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hoayypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define hoayypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hoayypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hoayyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hoayyensure_buffer_stack
#endif

#ifdef yylex
#define hoayylex_ALREADY_DEFINED
#else
#define yylex hoayylex
#endif

#ifdef yyrestart
#define hoayyrestart_ALREADY_DEFINED
#else
#define yyrestart hoayyrestart
#endif

#ifdef yylex_init
#define hoayylex_init_ALREADY_DEFINED
#else
#define yylex_init hoayylex_init
#endif

#ifdef yylex_init_extra
#define hoayylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hoayylex_init_extra
#endif

#ifdef yylex_destroy
#define hoayylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hoayylex_destroy
#endif

#ifdef yyget_debug
#define hoayyget_debug_ALREADY_DEFINED
#else
#define yyget_debug hoayyget_debug
#endif

#ifdef yyset_debug
#define hoayyset_debug_ALREADY_DEFINED
#else
#define yyset_debug hoayyset_debug
#endif

#ifdef yyget_extra
#define hoayyget_extra_ALREADY_DEFINED
#else
#define yyget_extra hoayyget_extra
#endif

#ifdef yyset_extra
#define hoayyset_extra_ALREADY_DEFINED
#else
#define yyset_extra hoayyset_extra
#endif

#ifdef yyget_in
#define hoayyget_in_ALREADY_DEFINED
#else
#define yyget_in hoayyget_in
#endif

#ifdef yyset_in
#define hoayyset_in_ALREADY_DEFINED
#else
#define yyset_in hoayyset_in
#endif

#ifdef yyget_out
#define hoayyget_out_ALREADY_DEFINED
#else
#define yyget_out hoayyget_out
#endif

#ifdef yyset_out
#define hoayyset_out_ALREADY_DEFINED
#else
#define yyset_out hoayyset_out
#endif

#ifdef yyget_leng
#define hoayyget_leng_ALREADY_DEFINED
#else
#define yyget_leng hoayyget_leng
#endif

#ifdef yyget_text
#define hoayyget_text_ALREADY_DEFINED
#else
#define yyget_text hoayyget_text
#endif

#ifdef yyget_lineno
#define hoayyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hoayyget_lineno
#endif

#ifdef yyset_lineno
#define hoayyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hoayyset_lineno
#endif

#ifdef yyget_column
#define hoayyget_column_ALREADY_DEFINED
#else
#define yyget_column hoayyget_column
#endif

#ifdef yyset_column
#define hoayyset_column_ALREADY_DEFINED
#else
#define yyset_column hoayyset_column
#endif

#ifdef yywrap
#define hoayywrap_ALREADY_DEFINED
#else
#define yywrap hoayywrap
#endif

#ifdef yyalloc
#define hoayyalloc_ALREADY_DEFINED
#else
#define yyalloc hoayyalloc
#endif

#ifdef yyrealloc
#define hoayyrealloc_ALREADY_DEFINED
#else
#define yyrealloc hoayyrealloc
#endif

#ifdef yyfree
#define hoayyfree_ALREADY_DEFINED
#else
#define yyfree hoayyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hoayywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 86
#define YY_END_OF_BUFFER 87
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[386] =
    {   0,
        0,    0,   67,   67,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   65,   65,    0,    0,   87,   85,
        3,    1,    1,   73,   85,   85,   85,   85,   85,   85,
       67,   70,   70,   69,   68,   78,   75,   75,   74,   86,
       84,   82,   82,   79,   81,   25,   85,   29,   85,   26,
       26,   26,   26,   25,   26,   26,   26,   25,   85,   53,
       85,   50,   54,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   56,   57,   58,   85,   61,   85,   63,   85,
       59,   65,    3,   65,   65,    1,    1,   85,   85,   41,

       85,   85,   85,   85,   85,   85,   85,   85,    3,    1,
        2,    2,    1,    0,    4,    0,    0,    0,    0,    0,
        0,   67,   70,   71,   71,   70,   72,   68,   66,   78,
       75,   76,   76,   75,   77,   84,   82,   83,   83,   82,
        0,    0,    0,    0,   29,   28,   26,   27,   26,   26,
       26,   26,   26,   26,   26,   26,   26,    0,   53,   48,
       55,   55,   55,   46,   55,   45,   55,   44,   47,   55,
       55,   56,   56,   57,   62,   61,   64,   63,   60,   59,
       65,    3,    4,    1,    2,    0,    0,    0,    2,    1,
        0,   37,   41,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   34,    0,    0,    0,   10,    9,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       13,   26,   26,   26,   26,   26,   26,   26,   26,   55,
       55,   55,   55,   55,   55,    0,    0,    0,    0,    0,
        0,   40,   37,   33,    0,    0,   42,    0,    0,    0,
        0,    0,   10,    5,    0,    0,   80,    0,    0,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   55,   55,
       55,   49,   43,   54,    0,    0,    0,    0,    0,    0,
        0,    0,    7,    0,    0,   26,   26,   26,   26,   26,
       18,   26,   26,   17,   55,   55,   50,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   26,   14,   12,   24,
       26,   26,   26,   26,   52,   51,    0,    0,    0,   32,
       31,    0,    0,    0,    0,   23,   26,   11,   26,   26,
       26,    0,    0,    0,   30,    0,    0,   22,   26,   26,
       26,   26,   39,    0,   36,   35,    6,   26,   16,   26,
       26,    0,   36,   26,   26,   26,    0,   15,   19,   26,
        0,   26,    0,   26,    0,   26,    0,   26,    0,   26,
       26,    0,   26,   26,   38,   26,   26,   26,   26,   26,
       26,   21,   26,   20,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    7,    1,    1,    1,    8,    1,    9,
       10,   11,    1,    1,   12,   13,   14,   15,   16,   17,
       18,   18,   18,   18,   18,   18,   18,   19,    1,    1,
        1,   20,    1,   21,   22,   23,   24,   25,   26,   27,
       27,   28,   27,   27,   27,   27,   27,   29,   30,   31,
       27,   32,   33,   34,   27,   27,   27,   27,   35,   27,
       36,   37,   36,    1,   38,    1,   39,   27,   40,   41,

       42,   43,   44,   45,   46,   27,   47,   48,   49,   50,
       51,   52,   27,   53,   54,   55,   56,   57,   27,   58,
       27,   27,   36,   59,   36,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[60] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    5,    5,
        6,    7,    7,    6,    8,    8,    8,    8,    9,    1,
        1,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1,    4,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    1
    } ;

static const flex_int16_t yy_base[402] =
    {   0,
        0,   49,    8,   18,    3,   31,   21,   32,   99,    0,
      158,    0,  206,  220,  234,  248,  262,  276,  290,  304,
      318,  332,  346,  360,   41,   55,  408,    0,  892,  893,
       45,   67,   68,  893,  879,  879,   73,   46,  859,  846,
        0,   77,   78,  873,  875,    0,   81,   82,  893,    0,
        0,   89,   90,  893,  343,  893,  873,  210,    0,  350,
      865,  200,   57,  864,  201,  214,  220,  210,   18,  893,
      862,  893,  893,    0,  187,  830,  208,  829,  836,  837,
      830,  823,  388,  376,  893,  859,  399,  858,  422,  857,
      429,    0,   94,    0,  861,  384,  424,  859,  257,  438,

      213,  819,  225,  839,  813,  809,  824,  848,  279,  861,
      860,  857,  856,  838,  893,  444,  455,  837,  836,  835,
      799,    0,  852,  851,  848,  847,  893,  840,  893,    0,
      847,  846,  843,  842,  893,    0,  843,  842,  839,  838,
      461,  834,  782,  263,  460,    0,  821,  893,  820,  256,
      263,  278,  284,  250,  276,  291,  304,  329,  893,  893,
        0,  784,  786,    0,  788,    0,  780,    0,    0,  788,
      777,  464,  259,  468,  893,  472,  893,  476,  893,  480,
        0,  335,    0,  496,  497,  320,  802,  789,  501,  502,
      818,    0,  493,  810,  788,  778,  804,  803,  802,  784,

      770,  764,  893,  815,  816,  795,  499,  893,  893,  798,
      774,  810,  811,  808,  809,  806,  807,  364,  779,  779,
      893,  337,  361,  346,  409,  365,  367,  340,  416,  765,
      757,  751,  753,  751,  760,  530,  531,  535,  536,  540,
      545,  893,    0,  893,  299,  752,  893,  781,  413,  751,
      756,  767,  893,  893,  743,  560,  893,  770,  769,  399,
      513,  412,  530,  494,  774,  552,   20,  773,  738,  744,
      747,    0,    0,    0,  755,  735,  744,  730,  742,  737,
      729,  742,  893,  730,  745,  523,  737,  726,  538,  484,
      893,  555,  556,  893,  688,  702,    0,  687,  671,  675,

      705,  557,  676,  681,  698,  695,  558,  893,  893,  893,
      687,  348,  560,  563,    0,    0,  614,  618,  601,  893,
      893,  636,  607,  640,  639,  893,  564,  893,  565,  570,
      281,  631,  599,  629,  893,  592,  634,  893,  572,  625,
      568,  574,  893,  602,    0,  893,  893,  579,  893,  569,
      577,  598,    0,  615,  614,  580,  620,  893,  893,  364,
      599,  583,  590,  581,  482,  518,  459,  585,  394,  594,
      586,  309,  587,  598,  893,  601,  599,  584,  603,  224,
      605,  893,  211,  893,  893,  659,  668,  677,  686,  695,
      704,  713,  722,  731,  740,  743,  745,    1,  754,  763,

      772
    } ;

static const flex_int16_t yy_def[402] =
    {   0,
      386,  386,  387,  387,  388,  388,  389,  389,  385,    9,
      385,   11,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  390,  390,    2,   27,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      391,  385,  385,  385,  392,  393,  385,  385,  385,  394,
      395,  385,  385,  385,  385,  385,  385,  385,  396,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  385,  385,
      385,  385,  385,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  399,  399,  399,  399,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  391,  385,  385,  385,  385,  385,  392,  385,  393,
      385,  385,  385,  385,  385,  395,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  396,  397,  385,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  385,  385,  385,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      399,  399,  399,  385,  385,  385,  385,  385,  385,  385,
      385,  400,  385,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  397,  397,  397,  397,  397,  397,  397,  397,  398,
      398,  398,  398,  398,  398,  385,  385,  385,  385,  385,
      385,  385,  400,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  398,  398,
      398,  398,  398,  398,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  397,  397,  397,  397,  397,
      385,  397,  397,  385,  398,  398,  398,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  397,  385,  385,  385,
      397,  397,  397,  397,  398,  398,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  397,  385,  397,  397,
      397,  385,  385,  385,  385,  385,  385,  385,  397,  397,
      397,  397,  385,  385,  401,  385,  385,  397,  385,  397,
      397,  385,  401,  397,  397,  397,  385,  385,  385,  397,
      385,  397,  385,  397,  385,  397,  385,  397,  385,  397,
      397,  385,  397,  397,  385,  397,  397,  397,  397,  397,
      397,  385,  397,  385,    0,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,

      385
    } ;

static const flex_int16_t yy_nxt[953] =
    {   0,
      385,   31,   32,   31,   33,   47,   34,   48,  161,   49,
       42,   35,   43,   36,   37,   37,   37,   37,   44,  158,
       42,   45,   43,   52,   38,   53,  159,   39,   44,   54,
       55,   45,  293,   47,   52,   48,   53,   49,  148,   50,
       54,   55,   93,   32,   93,   33,  109,   94,  109,   40,
       31,   32,   31,   33,   95,   34,   93,   32,   93,   33,
       35,   94,   36,   37,   37,   37,   37,   50,   95,  110,
      112,  111,  113,   38,  116,  148,   39,  118,  119,  123,
      125,  124,  126,  131,  133,  132,  134,  117,  117,  117,
      117,  137,  139,  138,  140,  182,  153,  182,   40,   30,

       31,   32,   31,   33,   56,   34,   56,   56,   56,   30,
       57,   30,   36,   58,   58,   58,   58,   30,   30,   59,
       60,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   62,   61,   61,   56,   30,   61,   63,   61,   61,
       61,   64,   61,   61,   61,   61,   61,   61,   65,   61,
       66,   61,   67,   68,   61,   61,   61,   56,   30,   31,
       32,   31,   33,   69,   34,   30,   70,   30,   30,   71,
       30,   36,   72,   73,   30,   30,   30,   30,   30,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   30,   30,   30,   75,   74,   76,   74,

       77,   78,   74,   79,   74,   74,   74,   74,   80,   74,
       74,   81,   82,   74,   74,   74,   30,   30,  148,  148,
       83,   83,   83,   83,  145,  145,  145,  145,  148,  384,
       30,   30,  148,   30,   83,   83,   83,   83,  148,  154,
      162,  163,  382,  194,   30,   30,  165,   30,   84,   84,
       84,   84,  195,  166,  152,   30,  197,  198,   30,   30,
      157,   30,   84,   84,   84,   84,  155,  115,  148,   30,
      192,  156,   30,   30,  148,   30,   85,   85,   30,   30,
      109,  148,  109,   30,  206,  219,   30,   30,  220,   30,
       85,   85,   30,   30,  148,  222,  148,   30,  226,  148,

       30,   86,  148,   30,   87,   87,   87,   87,  223,  148,
      275,   30,  173,  173,   30,   86,  224,   30,   87,   87,
       87,   87,  148,  225,  342,   30,  227,  375,   30,   88,
      158,   30,   89,   89,   89,   89,  182,  159,  182,   30,
      276,  228,   30,   88,  141,   30,   89,   89,   89,   89,
      142,  197,  198,   30,  229,  148,   30,   90,  148,   30,
       91,   91,   91,   91,  148,  256,  148,   30,  148,  256,
       30,   90,  257,   30,   91,   91,   91,   91,  260,  148,
      149,   30,  148,  148,   30,  148,  184,   30,  185,  150,
      174,  174,  174,  174,  267,   30,  329,  151,  262,  261,

      263,  143,  172,  172,  172,  172,  265,  362,  186,   30,
       96,  187,   97,  176,  176,  176,  176,  148,  266,   98,
      264,   99,  100,  100,  100,  100,  189,  148,  190,  101,
      148,  102,  103,  188,  148,  104,  178,  178,  178,  178,
      105,  173,  173,  180,  180,  180,  180,  372,  186,  106,
      286,  187,  193,  193,  193,  193,  116,  107,  207,  207,
      207,  207,  141,  268,  108,  278,  288,  279,  142,  117,
      117,  117,  117,  188,  145,  145,  145,  145,  172,  172,
      172,  172,  174,  174,  174,  174,  176,  176,  176,  176,
      178,  178,  178,  178,  180,  180,  180,  180,  184,  237,

      236,  238,  148,  239,  241,  240,  190,  193,  193,  193,
      193,  369,  148,  207,  207,  207,  207,  173,  173,  143,
      186,  186,  312,  187,  187,  186,  186,  367,  187,  187,
      368,  148,  241,  239,  238,  185,  148,  241,  239,  238,
      236,  148,  189,  290,  238,  188,  188,  239,  148,  236,
      188,  188,  253,  253,  186,  186,  310,  187,  187,  186,
      186,  256,  187,  187,  186,  256,  287,  187,  257,  186,
      148,  289,  187,  148,  148,  321,  148,  307,  148,  188,
      188,  148,  148,  148,  188,  188,  148,  148,  148,  188,
      148,  311,  148,  292,  188,  148,  327,  148,  148,  148,

      314,  148,  148,  148,  148,  148,  340,  313,  331,  350,
      322,  348,  148,  339,  330,  341,  148,  148,  351,  148,
      354,  148,  355,  148,  356,  360,  370,  364,  365,  363,
      376,  361,  359,  358,  373,  366,  377,  380,  371,  357,
      374,  352,  378,  349,  381,  347,  346,  345,  344,  343,
      338,  337,  336,  379,  335,  334,  333,  332,  383,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   92,   92,   92,   92,   92,

       92,   92,   92,   92,  122,  328,  326,  122,  122,  325,
      122,  122,  122,  128,  324,  323,  128,  128,  128,  128,
      128,  128,  130,  320,  319,  318,  130,  130,  130,  130,
      130,  135,  317,  135,  135,  135,  135,  135,  135,  135,
      136,  316,  315,  136,  309,  136,  136,  136,  136,  146,
      146,  147,  147,  147,  181,  308,  306,  181,  181,  181,
      181,  181,  181,  243,  305,  243,  243,  243,  243,  243,
      243,  243,  353,  304,  353,  353,  353,  353,  353,  353,
      353,  247,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  291,  285,  284,  283,  282,  281,  280,  247,

      277,  274,  273,  272,  271,  270,  269,  259,  258,  139,
      138,  133,  132,  125,  124,  255,  254,  252,  112,  111,
      251,  250,  249,  248,  247,  247,  246,  245,  244,  242,
      202,  199,  235,  234,  233,  232,  231,  230,  221,  148,
      218,  218,  140,  217,  216,  137,  134,  215,  214,  131,
      385,  126,  213,  212,  123,  211,  210,  209,  208,  206,
      113,  205,  204,  110,  203,  202,  201,  200,  199,  196,
      191,  183,  179,  177,  175,  171,  170,  169,  168,  167,
      164,  160,  148,  148,  144,  129,  127,  121,  120,  115,
      114,  385,   29,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385
    } ;

static const flex_int16_t yy_chk[953] =
    {   0,
        0,    1,    1,    1,    1,    5,    1,    5,  398,    5,
        3,    1,    3,    1,    1,    1,    1,    1,    3,   69,
        4,    3,    4,    7,    1,    7,   69,    1,    4,    7,
        7,    4,  267,    6,    8,    6,    8,    6,  267,    5,
        8,    8,   25,   25,   25,   25,   31,   25,   31,    1,
        2,    2,    2,    2,   25,    2,   26,   26,   26,   26,
        2,   26,    2,    2,    2,    2,    2,    6,   26,   32,
       33,   32,   33,    2,   37,   63,    2,   38,   38,   42,
       43,   42,   43,   47,   48,   47,   48,   37,   37,   37,
       37,   52,   53,   52,   53,   93,   63,   93,    2,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   62,   65,
       13,   13,   13,   13,   58,   58,   58,   58,   68,  383,
       13,   14,   66,   13,   14,   14,   14,   14,   67,   65,
       75,   75,  380,  101,   14,   15,   77,   14,   15,   15,
       15,   15,  101,   77,   62,   13,  103,  103,   15,   16,
       68,   15,   16,   16,   16,   16,   66,   99,  154,   14,
       99,   67,   16,   17,  150,   16,   17,   17,   17,   17,
      109,  151,  109,   15,  144,  144,   17,   18,  144,   17,
       18,   18,   18,   18,  155,  150,  152,   16,  154,  331,

       18,   19,  153,   18,   19,   19,   19,   19,  151,  156,
      245,   17,  173,  173,   19,   20,  152,   19,   20,   20,
       20,   20,  157,  153,  331,   18,  155,  372,   20,   21,
      158,   20,   21,   21,   21,   21,  182,  158,  182,   19,
      245,  156,   21,   22,   55,   21,   22,   22,   22,   22,
       55,  186,  186,   20,  157,  222,   22,   23,  228,   22,
       23,   23,   23,   23,  224,  218,  312,   21,   60,  218,
       23,   24,  218,   23,   24,   24,   24,   24,  222,  223,
       60,   22,  360,  226,   24,  227,   96,   24,   96,   60,
       84,   84,   84,   84,  228,   23,  312,   60,  224,  223,

      224,   55,   83,   83,   83,   83,  226,  360,   96,   24,
       27,   96,   27,   87,   87,   87,   87,  260,  227,   27,
      225,   27,   27,   27,   27,   27,   97,  225,   97,   27,
      262,   27,   27,   96,  229,   27,   89,   89,   89,   89,
       27,   83,   83,   91,   91,   91,   91,  369,   97,   27,
      260,   97,  100,  100,  100,  100,  117,   27,  116,  116,
      116,  116,  141,  229,   27,  249,  262,  249,  141,  117,
      117,  117,  117,   97,  145,  145,  145,  145,  172,  172,
      172,  172,  174,  174,  174,  174,  176,  176,  176,  176,
      178,  178,  178,  178,  180,  180,  180,  180,  184,  185,

      184,  185,  290,  189,  190,  189,  190,  193,  193,  193,
      193,  367,  264,  207,  207,  207,  207,  172,  172,  141,
      184,  185,  290,  184,  185,  189,  190,  365,  189,  190,
      366,  261,  236,  237,  236,  237,  366,  238,  239,  238,
      239,  286,  240,  264,  240,  184,  185,  241,  263,  241,
      189,  190,  207,  207,  236,  237,  289,  236,  237,  238,
      239,  256,  238,  239,  240,  256,  261,  240,  256,  241,
      266,  263,  241,  292,  293,  302,  307,  286,  313,  236,
      237,  314,  327,  329,  238,  239,  341,  350,  330,  240,
      339,  289,  342,  266,  241,  351,  307,  348,  356,  364,

      293,  362,  378,  368,  371,  373,  329,  292,  314,  341,
      302,  339,  370,  327,  313,  330,  374,  377,  342,  376,
      348,  379,  350,  381,  351,  356,  368,  362,  363,  361,
      373,  357,  355,  354,  370,  364,  374,  378,  368,  352,
      371,  344,  376,  340,  379,  337,  336,  334,  333,  332,
      325,  324,  323,  377,  322,  319,  318,  317,  381,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  391,  311,  306,  391,  391,  305,
      391,  391,  391,  392,  304,  303,  392,  392,  392,  392,
      392,  392,  393,  301,  300,  299,  393,  393,  393,  393,
      393,  394,  298,  394,  394,  394,  394,  394,  394,  394,
      395,  296,  295,  395,  288,  395,  395,  395,  395,  396,
      396,  397,  397,  397,  399,  287,  285,  399,  399,  399,
      399,  399,  399,  400,  284,  400,  400,  400,  400,  400,
      400,  400,  401,  282,  401,  401,  401,  401,  401,  401,
      401,  281,  280,  279,  278,  277,  276,  275,  271,  270,
      269,  268,  265,  259,  258,  255,  252,  251,  250,  248,

      246,  235,  234,  233,  232,  231,  230,  220,  219,  217,
      216,  215,  214,  213,  212,  211,  210,  206,  205,  204,
      202,  201,  200,  199,  198,  197,  196,  195,  194,  191,
      188,  187,  171,  170,  167,  165,  163,  162,  149,  147,
      143,  142,  140,  139,  138,  137,  134,  133,  132,  131,
      128,  126,  125,  124,  123,  121,  120,  119,  118,  114,
      113,  112,  111,  110,  108,  107,  106,  105,  104,  102,
       98,   95,   90,   88,   86,   82,   81,   80,   79,   78,
       76,   71,   64,   61,   57,   45,   44,   40,   39,   36,
       35,   29,  385,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanaut.ll"
/* -*- coding: utf-8 -*-
** Copyright (C) 2014-2018 Laboratoire de Recherche et Développement
** de l'Epita (LRDE).
**
** This file is part of Spot, a model checking library.
**
** Spot is free software; you can redistribute it and/or modify it
** under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 3 of the License, or
** (at your option) any later version.
**
** Spot is distributed in the hope that it will be useful, but WITHOUT
** ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
** or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
** License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/* %option debug */

#line 31 "scanaut.ll"
#include <string>
#include <sys/stat.h>
#include <spot/parseaut/parsedecl.hh>
#include "spot/priv/trim.hh"

#define YY_USER_ACTION yylloc->columns(yyleng);

typedef hoayy::parser::token token;

struct extra_data
{
  unsigned comment_level = 0;
  unsigned parent_level = 0;
  int orig_cond = 0;
  bool lbtt_s = false;
  bool lbtt_t = false;
  unsigned lbtt_states = 0;
  bool yyin_close = true;
};

#line 1017 "scanaut.cc"

#line 1019 "scanaut.cc"

#define INITIAL 0
#define in_COMMENT 1
#define in_STRING 2
#define in_NEVER_PAR 3
#define in_HOA 4
#define in_NEVER 5
#define in_LBTT_HEADER 6
#define in_LBTT_STATE 7
#define in_LBTT_INIT 8
#define in_LBTT_TRANS 9
#define in_LBTT_T_ACC 10
#define in_LBTT_S_ACC 11
#define in_LBTT_GUARD 12
#define in_DSTAR 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE struct extra_data*

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 63 "scanaut.ll"



#line 67 "scanaut.ll"
  std::string s;
  yylloc->step();

  auto parse_int = [&](){
    errno = 0;
    char* end;
    unsigned long n = strtoul(yytext, &end, 10);
    yylval->num = n;
    if (errno || yylval->num != n)
      {
        error_list.push_back(spot::parse_aut_error(*yylloc, "value too large"));
        yylval->num = 0;
      }
    return end;
  };



                        /* skip blanks and comments */
#line 1314 "scanaut.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 386 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 893 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 86 "scanaut.ll"
yylloc->lines(yyleng); yylloc->step();
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 87 "scanaut.ll"
yylloc->lines(yyleng / 2); yylloc->step();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 88 "scanaut.ll"
yylloc->step();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 89 "scanaut.ll"
{
                          yyextra->orig_cond = YY_START;
			  BEGIN(in_COMMENT);
			  yyextra->comment_level = 1;
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 94 "scanaut.ll"
BEGIN(in_HOA); return token::HOA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 95 "scanaut.ll"
BEGIN(INITIAL); throw spot::hoa_abort{*yylloc};
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 96 "scanaut.ll"
BEGIN(in_NEVER); return token::NEVER;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 97 "scanaut.ll"
BEGIN(in_DSTAR); return token::DSA;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 98 "scanaut.ll"
BEGIN(in_DSTAR); return token::DRA;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 100 "scanaut.ll"
{
	                  BEGIN(in_LBTT_HEADER);
			  char* end = nullptr;
			  errno = 0;
			  unsigned long n = strtoul(yytext, &end, 10);
			  yylval->num = n;
			  unsigned s = end - yytext;
			  yylloc->end = yylloc->begin;
 			  yylloc->end.columns(s);
			  yyless(s);
			  if (errno || yylval->num != n)
			    {
                              error_list.push_back(
			        spot::parse_aut_error(*yylloc,
				  "value too large"));
			      yylval->num = 0;
                            }
                          yyextra->lbtt_states = yylval->num;
			  return token::LBTT;
			}
	YY_BREAK

case 11:
YY_RULE_SETUP
#line 122 "scanaut.ll"
return token::STATES;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 123 "scanaut.ll"
return token::START;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 124 "scanaut.ll"
return token::AP;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 125 "scanaut.ll"
return token::ALIAS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 126 "scanaut.ll"
return token::ACCEPTANCE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 127 "scanaut.ll"
return token::ACCNAME;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 128 "scanaut.ll"
return token::TOOL;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 129 "scanaut.ll"
return token::NAME;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 130 "scanaut.ll"
return token::PROPERTIES;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 131 "scanaut.ll"
return token::SPOT_HIGHLIGHT_STATES;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 132 "scanaut.ll"
return token::SPOT_HIGHLIGHT_EDGES;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 133 "scanaut.ll"
return token::BODY;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 134 "scanaut.ll"
BEGIN(INITIAL); return token::END;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 135 "scanaut.ll"
return token::STATE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 136 "scanaut.ll"
return *yytext;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 138 "scanaut.ll"
{
			   yylval->str = new std::string(yytext, yyleng);
			   return token::IDENTIFIER;
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 142 "scanaut.ll"
{
			   yylval->str = new std::string(yytext, yyleng - 1);
			   return token::HEADERNAME;
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 146 "scanaut.ll"
{
			   yylval->str = new std::string(yytext + 1, yyleng - 1);
			   return token::ANAME;
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 150 "scanaut.ll"
parse_int(); return token::INT;
	YY_BREAK


case 30:
YY_RULE_SETUP
#line 154 "scanaut.ll"
return token::STATES;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 155 "scanaut.ll"
return token::STATE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 156 "scanaut.ll"
return token::START;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 157 "scanaut.ll"
return token::AP;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 158 "scanaut.ll"
return token::V2;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 159 "scanaut.ll"
return token::EXPLICIT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 160 "scanaut.ll"
yylloc->step();
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 161 "scanaut.ll"
yylloc->step();
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 162 "scanaut.ll"
return token::ACCPAIRS;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 163 "scanaut.ll"
return token::ACCSIG;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 164 "scanaut.ll"
return token::ENDOFHEADER;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "scanaut.ll"
parse_int(); return token::INT;
	YY_BREAK
/* The start of any automaton is the end of this one.
     We do not try to detect LBTT automata, as that would
     be too hard to distinguish from state numbers. */
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 169 "scanaut.ll"
{
			  yylloc->end = yylloc->begin;
			  yyless(0);
			  BEGIN(INITIAL);
			  return token::ENDDSTAR;
			}
	YY_BREAK
case YY_STATE_EOF(in_DSTAR):
#line 175 "scanaut.ll"
return token::ENDDSTAR;
	YY_BREAK


case 43:
YY_RULE_SETUP
#line 179 "scanaut.ll"
return token::SKIP;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 180 "scanaut.ll"
return token::IF;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 181 "scanaut.ll"
return token::FI;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 182 "scanaut.ll"
return token::DO;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "scanaut.ll"
return token::OD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 184 "scanaut.ll"
return token::ARROW;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "scanaut.ll"
return token::GOTO;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 186 "scanaut.ll"
return token::FALSE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 187 "scanaut.ll"
return token::ATOMIC;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 188 "scanaut.ll"
return token::ASSERT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 190 "scanaut.ll"
{
			  yyextra->parent_level = 1;
			  BEGIN(in_NEVER_PAR);
			  yylval->str = new std::string(yytext, yyleng);
			}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 196 "scanaut.ll"
{
                          yylval->str = new std::string(yytext, yyleng);
			  return token::FORMULA;
                        }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 201 "scanaut.ll"
{
			  yylval->str = new std::string(yytext, yyleng);
	                  return token::IDENTIFIER;
		        }
	YY_BREAK

/* Note: the LBTT format is scanf friendly, but not Bison-friendly.
     If we only tokenize it as a stream of INTs, the parser will have
     a very hard time recognizing what is a state from what is a
     transitions.  As a consequence we abuse the start conditions to
     maintain a state an return integers with different semantic types
     depending on the purpose of those integers. */

case 56:
YY_RULE_SETUP
#line 214 "scanaut.ll"
{
			  BEGIN(in_LBTT_STATE);
                          auto end = parse_int();
			  yyextra->lbtt_s = false;
			  yyextra->lbtt_t = false;
			  if (end)
			    while (int c = *end++)
			      {
			         if (c == 's')
			           yyextra->lbtt_s = true;
			         else // c == 't'
			           yyextra->lbtt_t = true;
			      }
  		          if (!yyextra->lbtt_t)
			    yyextra->lbtt_s = true;
			  if (yyextra->lbtt_states == 0)
			    {
                              BEGIN(INITIAL);
                              return token::LBTT_EMPTY;
			    }
			  if (yyextra->lbtt_s && !yyextra->lbtt_t)
			    return token::INT_S;
			  else
			    return token::INT;
			}
	YY_BREAK

case 57:
YY_RULE_SETUP
#line 241 "scanaut.ll"
{
                           parse_int();
			   BEGIN(in_LBTT_INIT);
			   return token::STATE_NUM;
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 246 "scanaut.ll"
{
                           yylval->num = *yytext - '0';
			   if (yyextra->lbtt_s)
			      BEGIN(in_LBTT_S_ACC);
			   else
			      BEGIN(in_LBTT_TRANS);
			   return token::INT;
			}
	YY_BREAK

case 59:
YY_RULE_SETUP
#line 255 "scanaut.ll"
parse_int(); return token::ACC;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 256 "scanaut.ll"
BEGIN(in_LBTT_TRANS); yylloc->step();
	YY_BREAK


case 61:
YY_RULE_SETUP
#line 259 "scanaut.ll"
{
			  parse_int();
			  if (yyextra->lbtt_t)
			    BEGIN(in_LBTT_T_ACC);
			  else
			    BEGIN(in_LBTT_GUARD);
			  return token::DEST_NUM;
			}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 267 "scanaut.ll"
{
                          if (--yyextra->lbtt_states)
			    {
			       BEGIN(in_LBTT_STATE);
			       yylloc->step();
			    }
			  else
			    {
			       BEGIN(INITIAL);
			       return token::ENDAUT;
			    }
			}
	YY_BREAK


case 63:
YY_RULE_SETUP
#line 281 "scanaut.ll"
parse_int(); return token::ACC;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 282 "scanaut.ll"
BEGIN(in_LBTT_GUARD); yylloc->step();
	YY_BREAK


case 65:
YY_RULE_SETUP
#line 285 "scanaut.ll"
{
  			  yylval->str = new std::string(yytext, yyleng);
			  BEGIN(in_LBTT_TRANS);
 			  return token::STRING;
			}
	YY_BREAK


case 66:
YY_RULE_SETUP
#line 294 "scanaut.ll"
++yyextra->comment_level;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 295 "scanaut.ll"
continue;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 296 "scanaut.ll"
continue;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 297 "scanaut.ll"
continue;
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 298 "scanaut.ll"
yylloc->lines(yyleng); yylloc->end.column = 1;
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 299 "scanaut.ll"
yylloc->lines(yyleng / 2); yylloc->end.column = 1;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 300 "scanaut.ll"
{
			  if (--yyextra->comment_level == 0)
			    {
			      yylloc->step();
                              int oc = yyextra->orig_cond;
		              BEGIN(oc);
		            }
                        }
	YY_BREAK
case YY_STATE_EOF(in_COMMENT):
#line 308 "scanaut.ll"
{
                           int oc = yyextra->orig_cond;
	                   BEGIN(oc);
                           error_list.push_back(
			     spot::parse_aut_error(*yylloc,
			       "unclosed comment"));
			   return 0;
                        }
	YY_BREAK

/* matched late, so that the in_LBTT_GUARD pattern has precedence */
case 73:
YY_RULE_SETUP
#line 319 "scanaut.ll"
{
                          yyextra->orig_cond = YY_START;
			  BEGIN(in_STRING);
			  yyextra->comment_level = 1;
			}
	YY_BREAK

case 74:
YY_RULE_SETUP
#line 326 "scanaut.ll"
{
                           int oc = yyextra->orig_cond;
                           BEGIN(oc);
			   yylval->str = new std::string(s);
			   return token::STRING;
 			}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 332 "scanaut.ll"
{
  			  s.append(yytext, yyleng);
                          yylloc->lines(yyleng); yylloc->end.column = 1;
			}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 336 "scanaut.ll"
{
  			  s.append(yytext, yyleng);
                          yylloc->lines(yyleng / 2); yylloc->end.column = 1;
			}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 340 "scanaut.ll"
s += yytext[1];
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 341 "scanaut.ll"
s.append(yytext, yyleng);
	YY_BREAK
case YY_STATE_EOF(in_STRING):
#line 342 "scanaut.ll"
{
                           error_list.push_back(
			     spot::parse_aut_error(*yylloc,
			       "unclosed string"));
                           int oc = yyextra->orig_cond;
                           BEGIN(oc);
			   yylval->str = new std::string(s);
			   return token::STRING;
                        }
	YY_BREAK


case 79:
YY_RULE_SETUP
#line 354 "scanaut.ll"
{
			  ++yyextra->parent_level;
			  yylval->str->append(yytext, yyleng);
			}
	YY_BREAK
/* if we match ")&&(" or ")||(", stay in <in_NEVER_PAR> mode */
case 80:
YY_RULE_SETUP
#line 359 "scanaut.ll"
{
	                  yylval->str->append(yytext, yyleng);
			}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 362 "scanaut.ll"
{
	                  yylval->str->append(yytext, yyleng);
			  if (!--yyextra->parent_level)
			    {
                              BEGIN(in_NEVER);
			      spot::trim(*yylval->str);
			      return token::FORMULA;
			    }
			}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 371 "scanaut.ll"
{
                          yylval->str->append(yytext, yyleng);
			  yylloc->lines(yyleng); yylloc->end.column = 1;
			}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 375 "scanaut.ll"
{
			  yylval->str->append(yytext, yyleng);
  			  yylloc->lines(yyleng / 2); yylloc->end.column = 1;
			}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 379 "scanaut.ll"
yylval->str->append(yytext, yyleng);
	YY_BREAK
case YY_STATE_EOF(in_NEVER_PAR):
#line 380 "scanaut.ll"
{
                          error_list.push_back(
			    spot::parse_aut_error(*yylloc,
 			      "missing closing parenthese"));
                          yylval->str->append(yyextra->parent_level, ')');
                          BEGIN(in_NEVER);
			  spot::trim(*yylval->str);
			  return token::FORMULA;
			}
	YY_BREAK

case 85:
YY_RULE_SETUP
#line 391 "scanaut.ll"
return *yytext;
	YY_BREAK

  /* Dummy use of yyunput to shut up a gcc warning.  */
  (void) &yyunput;

case 86:
YY_RULE_SETUP
#line 398 "scanaut.ll"
ECHO;
	YY_BREAK
#line 2031 "scanaut.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(in_HOA):
case YY_STATE_EOF(in_NEVER):
case YY_STATE_EOF(in_LBTT_HEADER):
case YY_STATE_EOF(in_LBTT_STATE):
case YY_STATE_EOF(in_LBTT_INIT):
case YY_STATE_EOF(in_LBTT_TRANS):
case YY_STATE_EOF(in_LBTT_T_ACC):
case YY_STATE_EOF(in_LBTT_S_ACC):
case YY_STATE_EOF(in_LBTT_GUARD):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 386 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 386 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 385);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 398 "scanaut.ll"


namespace spot
{
  void
  hoayyreset(yyscan_t yyscanner)
  {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    BEGIN(INITIAL);
    yyextra->comment_level = 0;
    yyextra->parent_level = 0;
  }

  int
  hoayyopen(const std::string &name, yyscan_t* scanner)
  {
    yylex_init_extra(new extra_data, scanner);
    yyscan_t yyscanner = *scanner;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    bool want_interactive = false;

    // yy_flex_debug = 1;
    if (name == "-")
      {
        // If the input is a pipe, make the scanner
        // interactive so that it does not wait for the input
        // buffer to be full to process automata.
        struct stat s;
        if (fstat(fileno(stdin), &s) < 0)
           throw std::runtime_error("fstat failed");
	if (S_ISFIFO(s.st_mode))
	  want_interactive = true;

        yyin = stdin;
        yyextra->yyin_close = false;
      }
    else
      {
        yyin = fopen(name.c_str(), "r");
        if (!yyin)
	  return 1;
        yyextra->yyin_close = true;
      }

    if (want_interactive)
      yy_set_interactive(1);
    return 0;
  }

  int
  hoayystring(const char* data, yyscan_t* scanner)
  {
    yylex_init_extra(new extra_data, scanner);
    yy_scan_string(data, *scanner);
    return 0;
  }

  int
  hoayyopen(int fd, yyscan_t* scanner)
  {
    yylex_init_extra(new extra_data, scanner);
    yyscan_t yyscanner = *scanner;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    bool want_interactive = false;
    yyextra->yyin_close = false;

    yyin = fdopen(fd, "r");

    if (!yyin)
      throw std::runtime_error("fdopen failed");

    // If the input is a pipe, make the scanner
    // interactive so that it does not wait for the input
    // buffer to be full to process automata.
    struct stat s;
    if (fstat(fd, &s) < 0)
      throw std::runtime_error("fstat failed");
    if (S_ISFIFO(s.st_mode))
      want_interactive = true;

    if (want_interactive)
      yy_set_interactive(1);
    return 0;
  }

  void
  hoayyclose(yyscan_t yyscanner)
  {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    if (yyin)
      {
        if (yyextra->yyin_close)
          fclose(yyin);
        yyin = NULL;
      }
    delete yyextra;
    yylex_destroy(yyscanner);
  }
}

