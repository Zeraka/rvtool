.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH LTLSYNT "1" "September 2019" "ltlsynt (spot) 2.8.2" "User Commands"
.SH NAME
ltlsynt \- reactive synthesis from LTL specifications
.SH SYNOPSIS
.B ltlsynt
[\fI\,OPTION\/\fR...]
.SH DESCRIPTION
Synthesize a controller from its LTL specification.
.SS "Input options:"
.TP
\fB\-f\fR, \fB\-\-formula\fR=\fI\,STRING\/\fR
process the formula STRING
.TP
\fB\-F\fR, \fB\-\-file\fR=\fI\,FILENAME\/\fR[\fI\,/COL\/\fR]\fI\,\/\fR
process each line of FILENAME as a formula; if COL
is a positive integer, assume a CSV file and read
column COL; use a negative COL to drop the first
line of the CSV file
.TP
\fB\-\-ins\fR=\fI\,PROPS\/\fR
comma\-separated list of uncontrollable (a.k.a.
input) atomic propositions
.TP
\fB\-\-lbt\-input\fR
read all formulas using LBT's prefix syntax
.TP
\fB\-\-lenient\fR
parenthesized blocks that cannot be parsed as
subformulas are considered as atomic properties
.TP
\fB\-\-outs\fR=\fI\,PROPS\/\fR
comma\-separated list of controllable (a.k.a.
output) atomic propositions
.SS "Output format:"
.TP
\fB\-8\fR, \fB\-\-utf8\fR
enable UTF\-8 characters in output (ignored with
\fB\-\-lbtt\fR or \fB\-\-spin\fR)
.TP
\fB\-\-check\fR[=\fI\,PROP\/\fR]
test for the additional property PROP and output
the result in the HOA format (implies \fB\-H\fR).  PROP
may be any prefix of 'all' (default),
\&'unambiguous', 'stutter\-invariant', or 'strength'.
.TP
\fB\-d\fR, \fB\-\-dot\fR[=\fI\,1\/\fR|\fI\,a\/\fR|\fI\,A\/\fR|\fI\,b\/\fR|\fI\,B\/\fR|\fI\,c\/\fR|\fI\,C(COLOR)\/\fR|\fI\,e\/\fR|\fI\,f(FONT)\/\fR|\fI\,h\/\fR|\fI\,k\/\fR|\fI\,K\/\fR|\fI\,n\/\fR|\fI\,N\/\fR|\fI\,o\/\fR|\fI\,r\/\fR|\fI\,R\/\fR|\fI\,s\/\fR|\fI\,t\/\fR|\fI\,u\/\fR|\fI\,v\/\fR|\fI\,y\/\fR|\fI\,+INT\/\fR|\fI\,<INT\/\fR|\fI\,#\/\fR]
GraphViz's format.
Add letters for (1) force numbered states, (a)
show acceptance condition (default), (A) hide
acceptance condition, (b) acceptance sets as
bullets, (B) bullets except for Büchi/co\-Büchi
automata, (c) force circular nodes, (C) color
nodes with COLOR, (d) show origins when known, (e)
force elliptic nodes, (f(FONT)) use FONT, (g) hide
edge labels, (h) horizontal layout, (k) use state
labels when possible, (K) use transition labels
(default), (n) show name, (N) hide name, (o)
ordered transitions, (r) rainbow colors for
acceptance sets, (R) color acceptance sets by
Inf/Fin, (s) with SCCs, (t) force transition\-based
acceptance, (u) hide true states, (v) vertical
layout, (y) split universal edges by color, (+INT)
add INT to all set numbers, (<INT) display at most
INT states, (#) show internal edge numbers
.TP
\fB\-H\fR, \fB\-\-hoaf\fR[=\fI\,1.1\/\fR|\fI\,i\/\fR|\fI\,k\/\fR|\fI\,l\/\fR|\fI\,m\/\fR|\fI\,s\/\fR|\fI\,t\/\fR|\fI\,v\/\fR]
Output the automaton in HOA format
(default).  Add letters to select (1.1) version
1.1 of the format, (i) use implicit labels for
complete deterministic automata, (s) prefer
state\-based acceptance when possible [default],
(t) force transition\-based acceptance, (m) mix
state and transition\-based acceptance, (k) use
state labels when possible, (l) single\-line
output, (v) verbose properties
.TP
\fB\-\-lbtt\fR[=\fI\,t\/\fR]
LBTT's format (add =t to force transition\-based
acceptance even on Büchi automata)
.TP
\fB\-\-name\fR=\fI\,FORMAT\/\fR
set the name of the output automaton
.TP
\fB\-o\fR, \fB\-\-output\fR=\fI\,FORMAT\/\fR
send output to a file named FORMAT instead of
standard output.  The first automaton sent to a
file truncates it unless FORMAT starts with '>>'.
.TP
\fB\-q\fR, \fB\-\-quiet\fR
suppress all normal output
.TP
\fB\-s\fR, \fB\-\-spin\fR[=\fI\,6\/\fR|\fI\,c\/\fR]
Spin neverclaim (implies \fB\-\-ba\fR).  Add letters to
select (6) Spin's 6.2.4 style, (c) comments on
states
.TP
\fB\-\-stats\fR=\fI\,FORMAT\/\fR, \fB\-\-format\fR=\fI\,FORMAT\/\fR
output statistics about the automaton
.SS "Fine tuning:"
.TP
\fB\-\-algo\fR=\fI\,ds\/\fR|\fI\,sd\/\fR|\fI\,large\/\fR
choose the algorithm for synthesis:
\- sd:   split then determinize with Safra
.TP
(default)
\- ds:   determinize (Safra) then split
\- lar:  translate to a deterministic automaton
.TP
with arbitrary acceptance condition, then use LAR
to turn to parity, then split
.SS "Output options:"
.TP
\fB\-\-aiger\fR
prints the winning strategy as an AIGER circuit
.TP
\fB\-\-print\-pg\fR
print the parity game in the pgsolver format, do
not solve it
.TP
\fB\-\-realizability\fR
realizability only, do not compute a winning
strategy
.SS "Miscellaneous options:"
.TP
\fB\-\-help\fR
print this help
.TP
\fB\-\-verbose\fR
verbose mode
.TP
\fB\-\-version\fR
print program version
.PP
Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.
.SS "Exit status:"
.TP
0
if the input problem is realizable
.TP
1
if the input problem is not realizable
.TP
2
if any error has been reported
.SH BIBLIOGRAPHY
If you would like to give a reference to this tool in an article,
we suggest you cite the following paper:
.TP
\(bu
Thibaud Michaud, Maximilien Colange: Reactive Synthesis from LTL
Specification with Spot. Proceedings of SYNT@CAV'18.
.SH "REPORTING BUGS"
Report bugs to <spot@lrde.epita.fr>.
.SH COPYRIGHT
Copyright \(co 2019  Laboratoire de Recherche et Développement de l'Epita.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
