.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH LTLCROSS "1" "September 2019" "ltlcross (spot) 2.8.2" "User Commands"
.SH NAME
ltlcross \- cross-compare LTL/PSL translators to omega-automata
.SH SYNOPSIS
.B ltlcross
[\fI\,OPTION\/\fR...] [\fI\,COMMANDFMT\/\fR...]
.SH DESCRIPTION
Call several LTL/PSL translators and cross\-compare their output to detect bugs,
or to gather statistics.  The list of formulas to use should be supplied on
standard input, or using the \fB\-f\fR or \fB\-F\fR options.
.SS "Input options:"
.TP
\fB\-f\fR, \fB\-\-formula\fR=\fI\,STRING\/\fR
process the formula STRING
.TP
\fB\-F\fR, \fB\-\-file\fR=\fI\,FILENAME\/\fR[\fI\,/COL\/\fR]\fI\,\/\fR
process each line of FILENAME as a formula; if COL
is a positive integer, assume a CSV file and read
column COL; use a negative COL to drop the first
line of the CSV file
.TP
\fB\-\-lbt\-input\fR
read all formulas using LBT's prefix syntax
.TP
\fB\-\-lenient\fR
parenthesized blocks that cannot be parsed as
subformulas are considered as atomic properties
.SS "Specifying translators to call:"
.TP
\fB\-\-list\-shorthands\fR
list availabled shorthands to use in COMMANDFMT
.TP
\fB\-\-reference\fR=\fI\,COMMANDFMT\/\fR register one translator and assume it is correct
(do notcheck it for error, but use it to check
other translators)
.TP
\fB\-\-relabel\fR
always relabel atomic propositions before calling
any translator
.TP
\fB\-t\fR, \fB\-\-translator\fR=\fI\,COMMANDFMT\/\fR
register one translator to call
.TP
\fB\-T\fR, \fB\-\-timeout\fR=\fI\,NUMBER\/\fR
kill translators after NUMBER seconds
.PP
COMMANDFMT should specify input and output arguments using the following
character sequences:
.TP
%%
a single %
.TP
%f,%s,%l,%w
the formula as a (quoted) string in Spot, Spin,
LBT, or Wring's syntax
.TP
%F,%S,%L,%W
the formula as a file in Spot, Spin, LBT, or
Wring's syntax
.TP
%O
the automaton output in HOA, never claim, LBTT, or
ltl2dstar's format
.PP
If either %l, %L, or %T are used, any input formula that does not use LBT\-style
atomic propositions (i.e. p0, p1, ...) will be relabeled automatically.
Likewise if %s or %S are used with atomic proposition that compatible with
Spin's syntax.  You can force this relabeling to always occur with option
\fB\-\-relabel\fR.
The sequences %f,%s,%l,%w,%F,%S,%L,%W can optionally be "infixed" by a
bracketed sequence of operators to unabbreviate before outputing the formula.
For instance %[MW]f will rewrite operators M and W before outputing it.
Furthermore, if COMMANDFMT has the form "{NAME}CMD", then only CMD will be
passed to the shell, and NAME will be used to name the tool in the output.
.SS "Parsing of automata:"
.TP
\fB\-\-trust\-hoa\fR=\fI\,BOOL\/\fR
If False, properties listed in HOA files are
ignored, unless they can be easily verified.  If
True (the default) any supported property is
trusted.
.SS "ltlcross behavior:"
.TP
\fB\-\-allow\-dups\fR
translate duplicate formulas in input
.TP
\fB\-\-determinize\-max\-edges\fR=\fI\,N\/\fR
attempt to determinize non\-deterministic
automata so they can be complemented, unless the
deterministic automaton would have more than N
edges.  Without this option or \fB\-D\fR,
determinizations are attempted up to 5000 edges.
.TP
\fB\-\-determinize\-max\-states\fR=\fI\,N\/\fR
attempt to determinize non\-deterministic
automata so they can be complemented, unless the
deterministic automaton would have more than N
states.  Without this option or \fB\-D\fR,
determinizations are attempted up to 500 states.
.TP
\fB\-D\fR, \fB\-\-determinize\fR
always determinize non\-deterministic automata so
that theycan be complemented; also implicitly sets
\fB\-\-products\fR=\fI\,0\/\fR
.TP
\fB\-\-fail\-on\-timeout\fR
consider timeouts as errors
.TP
\fB\-\-ignore\-execution\-failures\fR
ignore automata from translators that return with
a non\-zero exit code, but do not flag this as an
error
.TP
\fB\-\-no\-checks\fR
do not perform any sanity checks (negated formulas
will not be translated)
.TP
\fB\-\-no\-complement\fR
do not complement deterministic automata to
perform extra checks
.TP
\fB\-\-stop\-on\-error\fR
stop on first execution error or failure to pass
sanity checks (timeouts are OK)
.SS "State-space generation:"
.TP
\fB\-\-density\fR=\fI\,FLOAT\/\fR
probability, between 0.0 and 1.0, to add a
transition between two states (0.1 by default)
.TP
\fB\-\-products\fR=\fI\,\/\fR[\fI\,+\/\fR]\fI\,INT\/\fR
number of products to perform (1 by default),
statistics will be averaged unless the number is
prefixed with '+'
.TP
\fB\-\-seed\fR=\fI\,INT\/\fR
seed for the random number generator (0 by
default)
.TP
\fB\-\-states\fR=\fI\,INT\/\fR
number of the states in the state\-spaces (200 by
default)
.SS "Statistics output:"
.TP
\fB\-\-ambiguous\fR, \fB\-\-unambiguous\fR
output statistics about ambiguous automata
[not supported for alternating automata]
.TP
\fB\-\-automata\fR
store automata (in the HOA format) into the CSV or
JSON output
.TP
\fB\-\-csv\fR[\fI\,\/\fR=\fI\,\/\fR[\fI\,\/\fR>>]FILENAME]
output statistics as CSV in FILENAME or on
standard output (if '>>' is used to request append
mode, the header line is not output)
.TP
\fB\-\-json\fR[\fI\,\/\fR=\fI\,\/\fR[\fI\,\/\fR>>]FILENAME]
output statistics as JSON in FILENAME or on
standard output
.TP
\fB\-\-omit\-missing\fR
do not output statistics for timeouts or failed
translations
.TP
\fB\-\-strength\fR
output statistics about SCC strengths
(non\-accepting, terminal, weak, strong) [not
supported for alternating automata]
.SS "Output options:"
.TP
\fB\-\-color\fR[=\fI\,WHEN\/\fR]
colorize output; WHEN can be 'never', 'always'
(the default if \fB\-\-color\fR is used without argument),
or 'auto' (the default if \fB\-\-color\fR is not used)
.TP
\fB\-\-grind\fR=\fI\,\/\fR[\fI\,\/\fR>>]FILENAME
for each formula for which a problem was detected,
write a simpler formula that fails on the same
test in FILENAME
.TP
\fB\-q\fR, \fB\-\-quiet\fR
suppress all normal output in absence of error
.TP
\fB\-\-save\-bogus\fR=\fI\,\/\fR[\fI\,\/\fR>>]FILENAME
save formulas for which problems were
detected in FILENAME
.TP
\fB\-\-verbose\fR
print what is being done, for debugging
.PP
If an output FILENAME is prefixed with '>>', it is open in append mode instead
of being truncated.
.SS "Miscellaneous options:"
.TP
\fB\-\-help\fR
print this help
.TP
\fB\-\-version\fR
print program version
.PP
Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.
.SS "Exit status:"
.TP
0
everything went fine (without \fB\-\-fail\-on\-timeout\fR, timeouts are OK)
.TP
1
some translator failed to output something we understand, or failed
sanity checks (statistics were output nonetheless)
.TP
2
ltlcross aborted on error
.SH "ENVIRONMENT VARIABLES"
.TP
\fBSPOT_TMPDIR\fR, \fBTMPDIR\fR
These variables control in which directory temporary files (e.g.,
those who contain the input and output when interfacing with
translators) are created.  \fBTMPDIR\fR is only read if
\fBSPOT_TMPDIR\fR does not exist.  If none of these environment
variables exist, or if their value is empty, files are created in the
current directory.
.TP
\fBSPOT_TMPKEEP\fR
When this variable is defined, temporary files are not removed.
This is mostly useful for debugging.
.SH "OUTPUT DATA"
The following columns are output in the CSV or JSON files.
.TP
\fBformula\fR
The formula translated.
.TP
\fBtool\fR
The tool used to translate this formula.  This is either the value of the
full \fICOMMANDFMT\fR string specified on the command-line, or,
if \fICOMMANDFMT\fR has the form \f(CW{\fISHORTNAME\fR\f(CW}\fR\fICMD\fR,
the value of \fISHORTNAME\fR.
.TP
\fBexit_status\fR, \fBexit_code\fR
Information about how the execution of the translator went.  If the
option \fB\-\-omit\-missing\fR is given, these two columns are omitted
and only the lines corresponding to successful translation are output.
Otherwise, \fBexit_status\fR is a string that can take the following
values:
.RS
.TP
\f(CW"ok"\fR
The translator ran succesfully (this does not imply that the produced
automaton is correct) and ltlcross could parse the resulting
automaton.  In this case \fBexit_code\fR is always 0.
.TP
\f(CW"timeout"\fR
The translator ran for more than the number of seconds
specified with the \fB\-\-timeout\fR option.  In this
case \fBexit_code\fR is always -1.
.TP
\f(CW"exit code"\fR
The translator terminated with a non-zero exit code.
\fBexit_code\fR contains that value.
.TP
\f(CW"signal"\fR
The translator terminated with a signal.
\fBexit_code\fR contains that signal's number.
.TP
\f(CW"parse error"\fR
The translator terminated normally, but ltlcross could not
parse its output.  In this case \fBexit_code\fR is always -1.
.TP
\f(CW"no output"\fR
The translator terminated normally, but without creating the specified
output file.  In this case \fBexit_code\fR is always -1.
.RE
.TP
\fBtime\fR
A floating point number giving the run time of the translator in seconds.
This is reported for all executions, even failling ones.
.PP
Unless the \fB\-\-omit\-missing\fR option is used, data for all the
following columns might be missing.
.TP
\fBstates\fR, \fBedges\fR, \fBtransitions\fR, \fBacc\fR
The number of states, edges, transitions, and acceptance sets in the
translated automaton.  Column \fBedges\fR counts the number of edges
(labeled by Boolean formulas) in the automaton seen as a graph, while
\fBtransitions\fR counts the number of assignment-labeled transitions
that might have been merged into a formula-labeled edge.  For instance
an edge labeled by \f(CWtrue\fR will be counted as 2^3=8 transitions if
the automaton uses 3 atomic propositions.
.TP
\fBscc\fR, \fBnonacc_scc\fR, \fBterminal_scc\fR, \fBweak_scc\fR, \fBstrong_scc\fR
The number of strongly connected components in the automaton.  The
\fBscc\fR column gives the total number, while the other columns only
count the SCCs that are non-accepting (a.k.a. transiant), terminal
(recognizes and accepts all words), weak (do not recognize all words,
but accepts all recognized words), or strong (accept some words, but
reject some recognized words).
.TP
\fBnondet_states\fR, \fBnondet_aut\fR
The number of nondeterministic states, and a Boolean indicating whether the
automaton is nondeterministic.
.TP
\fBterminal_aut\fR, \fBweak_aut\fR, \fBstrong_aut\fR
Three Boolean used to indicate whether the automaton is terminal (no
weak nor strong SCCs), weak (some weak SCCs but no strong SCCs), or strong
(some strong SCCs).
.TP
\fBproduct_states\fR, \fBproduct_transitions\fR, \fBproduct_scc\fR
Size of the product between the translated automaton and a randomly
generated state-space.  For a given formula, the same state-space is
of course used the result of each translator.  When the
\fB\-\-products\fR=\fIN\fR option is used, these values are averaged
over the \fIN\fR products performed.
.SH "DEPRECATED OUTPUT SPECIFIERS"
Until version 1.2.6, the output of translators was specifed using the
following escape sequences.
.PP
.TP
%N
An output file containing a never claim.
.TP
%T
An output file in \fBlbtt\fR's format.
.TP
%D
An output file in \fBltl2dstar\fR's format.
.PP
Some development versions leading to 1.99.1 also featured
.PP
.TP
%H
An output file in the HOA format.
.PP
Different specifiers were needed because Spot implemented
different parsers for these formats.  Nowadays, these parsers
have been merged into a single parser that is able to
distinguish these four formats automatically.
.B ltlcross
officially supports only one output specifier:
.TP
%O
An output file in either \fBlbtt\fR's format, \fBltl2dstar\fR's format,
as a never claim, or in the HOA format
.P
For backward compatibility, the sequences %D, %H, %N, and %T, are
still supported (as aliases for %O), but are deprecated.
.SH BIBLIOGRAPHY
If you would like to give a reference to this tool in an article,
we suggest you cite the following paper:
.PP
.TP
\(bu
Alexandre Duret-Lutz: Manipulating LTL formulas using Spot 1.0.
Proceedings of ATVA'13.  LNCS 8172.
.PP
.B ltlcross
is a Spot-based reimplementation of a tool called LBTT.  LBTT
was developped by Heikki Tauriainen at the Helsinki University of
Technology.  The main motivation for the reimplementation was to
support PSL, and output more statistics about the translations.
.PP
The sanity checks performed on the result of each translator (by
either LBTT or ltlcross) are described in the following paper:
.PP
.TP
\(bu
H. Tauriainen and K. Heljanko: Testing LTL formula translation into
Büchi automata.  Int. J. on Software Tools for Technology Transfer.
Volume 4, number 1, October 2002.
.PP
LBTT did not implement Test 2 described in this paper.  ltlcross
implements a slight variation: when an automaton produced by some
translator is deterministic, its complement is built and used for
additional cross-comparisons with other tools.  If the translation P1
of the positive formula and the translation N1 of the negative formula
both yield deterministic automata (this may only happen for obligation
properties) then the emptiness check of Comp(P1)*Comp(N1) is
equivalent to Test 2 of Tauriainen and Heljanko.  If only one
automaton is deterministic, say P1, it can still be used to check we
can be used to check the result of another translators, for instance
checking the emptiness of Comp(P1)*P2.
.PP
Our implementation will detect and reports problems (like
inconsistencies between two translations) but unlike LBTT it does not
offer an interactive mode to investigate such problems.
.PP
Another major difference with LBTT is that ltlcross is
not restricted to generalized Büchi acceptance.  It supports
Rabin and Streett automata via ltl2dstar's format, and automata
with arbitrary acceptance conditions via the HOA format.
.SH EXAMPLES
The following commands compare never claims produced by
.BR ltl2tgba (1),
.BR spin (1),
and
.B lbt
for 100 random formulas, using a timeout of 2 minutes.  Because
.B ltlcross
knows those tools, there is no need to specify their input and
output. A trace of the execution of the two tools, including any
potential issue detected, is reported on standard error, while
statistics are written to \f(CWresults.json\fR.
.PP
.in +4n
.nf
.ft C
% randltl \-n100 \-\-tree\-size=20..30 a b c | \e
ltlcross \-T120 ltl2tgba spin lbt \-\-json=results.json
.fi
.PP
The next command compares
.BR lbt ,
.BR ltl3ba ,
and
.BR ltl2tgba (1)
on a set of formulas saved in file \f(CWinput.ltl\fR.
Statistics are again writen
as CSV into \f(CWresults.csv\fR.  This examples specify the
input and output for each tool, to show how this can be done.
Note the use of \f(CW%L\fR to indicate that the formula passed t
for the formula in
.BR spin (1)'s
format, and \f(CW%f\fR for the
formula in Spot's format.  Each of these tool produces an
automaton in a different format (respectively, LBTT's format,
Spin's never claims, and HOA format), but Spot's parser can
distinguish and understand these three formats.
.PP
.in +4n
.nf
.ft C
% ltlcross \-F input.ltl \-\-csv=results.csv \e
           'lbt <%L >%O' \e
           'ltl3ba \-f %s >%O' \e
           'ltl2tgba \-H %f >%O'
.fi
.PP
Rabin or Streett automata output by
.B ltl2dstar
in its historical format can be read from a
file specified with \f(CW%D\fR instead of \f(CW%O\fR.  For instance:
.PP
.in +4n
.nf
.ft C
% ltlcross \-F input.ltl \e
  'ltl2dstar \-\-ltl2nba=spin:ltl2tgba@\-Ds %L %D' \e
  'ltl2dstar \-\-automata=streett \-\-ltl2nba=spin:ltl2tgba@\-Ds %L %D' \e
.fi
.PP
However, we now recommand to use the HOA output of
.BR ltl2dstar ,
as supported since version 0.5.2:
.PP
.in +4n
.nf
.ft C
% ltlcross \-F input.ltl \e
  'ltl2dstar \-\-output\-format=hoa \-\-ltl2nba=spin:ltl2tgba@\-Ds %L %O' \e
  'ltl2dstar \-\-output\-format=hoa \-\-automata=streett \-\-ltl2nba=spin:ltl2tgba@\-Ds %L %O' \e
.fi
.PP
In more recent versions of ltl2dstar, \fB\-\-output\-format=hoa\fR can
be abbreviated \fB-H\fR.
.SH "REPORTING BUGS"
Report bugs to <spot@lrde.epita.fr>.
.SH COPYRIGHT
Copyright \(co 2019  Laboratoire de Recherche et Développement de l'Epita.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
.BR randltl (1),
.BR genltl (1),
.BR ltlfilt (1),
.BR ltl2tgba (1),
.BR ltldo (1)
